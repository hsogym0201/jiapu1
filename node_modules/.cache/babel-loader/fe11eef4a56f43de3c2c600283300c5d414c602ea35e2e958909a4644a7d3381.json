{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"DiTu1\"\n};\nconst _hoisted_2 = {\n  ref: \"chart\",\n  style: {\n    \"width\": \"600px\",\n    \"height\": \"400px\",\n    \"border\": \"1px solid gray\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <div ref=\\\"chart\\\" style=\\\"border: 2px solid gray;\\\"></div> \"), _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2"],"sources":["D:\\00demo\\jiapudemo1\\src\\components\\DiTu1.vue"],"sourcesContent":["<template>\r\n    <div class=\"DiTu1\">\r\n      <!-- <div ref=\"chart\" style=\"border: 2px solid gray;\"></div> -->\r\n      <div ref=\"chart\" style=\"width: 600px; height: 400px; border: 1px solid gray;\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { onMounted, ref } from 'vue';\r\n  import * as echarts from 'echarts';\r\n  import emitter from '@/utils/emitter';\r\n  import Chinamap from '../assets/china.json';\r\n  import MyData from '../assets/new.json';\r\n  \r\n  const province = [\r\n      '北京', '天津', '河北', '山西', '内蒙古', '辽宁', '吉林',\r\n      '黑龙江', '上海', '江苏', '浙江', '安徽', '福建', '江西',\r\n      '山东', '河南', '湖北', '湖南', '广东', '广西', '海南',\r\n      '重庆', '四川', '贵州', '云南', '西藏', '陕西', '甘肃',\r\n      '青海', '宁夏', '新疆', '台湾', '澳门', '香港'\r\n  ];\r\n  \r\n  const phases = [\r\n      { start: 1600, end: 1700 },\r\n      { start: 1701, end: 1800 },\r\n      { start: 1801, end: 1900 },\r\n      { start: 1901, end: 2000 },\r\n      { start: 2001, end: 2024 }\r\n  ];\r\n  \r\n  let myChart;\r\n  const chart = ref();\r\n  const phasesName = ['17世纪', '18世纪', '19世纪', '20世纪', '21世纪'];\r\n  \r\n  const chartOption = {\r\n      baseOption: {\r\n          timeline: {\r\n              axisType: 'category',\r\n              // realtime: false,\r\n              autoPlay: true,\r\n              playInterval: 3000,\r\n              symbolSize: 16,\r\n              left: '5%',\r\n              right: '5%',\r\n              bottom: '0%',\r\n              width: '90%',\r\n              // controlStyle: {\r\n              //     position: 'left'\r\n              // },\r\n              data: phasesName,\r\n              tooltip: {\r\n                  formatter: phases,\r\n              },\r\n          },\r\n          tooltip: {\r\n              show: true,\r\n              formatter: function (params) {\r\n                  return params.name + '：' + params.value\r\n              },\r\n          },\r\n          visualMap: {\r\n              type: 'piecewise',\r\n              pieces: [\r\n                  {\r\n                      min: 1000,\r\n                      max: 10000,\r\n                      color: '#BD430A'\r\n                  },\r\n                  {\r\n                      min: 501,\r\n                      max: 1000,\r\n                      color: '#E08150'\r\n                  },\r\n                  {\r\n                      min: 101,\r\n                      max: 500,\r\n                      color: '#E9B090'\r\n                  },\r\n                  {\r\n                      min: 1,\r\n                      max: 100,\r\n                      color: '#F2DDD2'\r\n                  },\r\n                  {\r\n                      value: 0,\r\n                      color: 'white'\r\n                  }\r\n              ],\r\n              orient: 'vertical',\r\n              itemWidth: 25,\r\n              itemHeight: 15,\r\n              showLabel: true,\r\n              seriesIndex: [0],\r\n  \r\n              textStyle: {\r\n                  color: '#7B93A7'\r\n              },\r\n              bottom: '10%',\r\n              left: \"5%\",\r\n          },\r\n          grid: {\r\n              right: '5%',\r\n              top: '20%',\r\n              bottom: '10%',\r\n              width: '20%'\r\n          },\r\n          xAxis: {\r\n              // min: 0,\r\n              // max: 4000,\r\n              scale: true,\r\n              show: false\r\n          },\r\n          yAxis: [{\r\n              inverse: true,\r\n              offset: '2',\r\n              'type': 'category',\r\n              data: '',\r\n              nameTextStyle: {\r\n                  color: '#fff'\r\n              },\r\n              axisTick: {\r\n                  show: false,\r\n              },\r\n              axisLabel: {\r\n                  //rotate:45,\r\n                  textStyle: {\r\n                      fontSize: 14,\r\n                      color: '#000000',\r\n                  },\r\n                  interval: 0\r\n              },\r\n              axisLine: {\r\n                  show: false,\r\n                  lineStyle: {\r\n                      color: '#333'\r\n                  },\r\n              },\r\n              splitLine: {\r\n                  show: false,\r\n                  lineStyle: {\r\n                      color: '#333'\r\n                  }\r\n              },\r\n          }],\r\n          geo: {\r\n              map: 'china',\r\n              right: '35%',\r\n              left: '20%',\r\n              emphasis: {\r\n                label: {\r\n                    show:false\r\n                },\r\n                itemStyle: {\r\n                    areaColor: '#8792b3'\r\n                }\r\n              },\r\n              select: {\r\n                label: {\r\n                    show: false\r\n                },\r\n                itemStyle: {\r\n                    areaColor: '#ffffff' \r\n                }\r\n              },\r\n              selectedMode: 'single',\r\n            //   label: {\r\n            //       emphasis: {\r\n            //           show: false\r\n            //       }\r\n            //   },\r\n            //   itemStyle: {\r\n            //       emphasis: {\r\n            //           areaColor: '#8792b3'\r\n            //       }\r\n            //   }\r\n          },\r\n          series: [{\r\n              name: 'mapSer',\r\n              type: 'map',\r\n              map: 'china',\r\n              roam: false,\r\n              geoIndex: 0,\r\n              label: {\r\n                  show: false,\r\n              },\r\n          },\r\n          {\r\n              'name': '',\r\n              'type': 'bar',\r\n              zlevel: 2,\r\n              barWidth: '40%',\r\n              label: {\r\n                  normal: {\r\n                      show: true,\r\n                      fontSize: 14,\r\n                      position: 'right',\r\n                      formatter: '{c}'\r\n                  }\r\n              },\r\n          }\r\n          ],\r\n      },\r\n      animationDurationUpdate: 3000,\r\n      animationEasingUpdate: 'quinticInOut',\r\n      options: []\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  onMounted(() => {\r\n      echarts.registerMap('china', Chinamap);\r\n      myChart = echarts.init(chart.value);\r\n      updateChart(MyData);\r\n  });\r\n  \r\n  emitter.on('data', updateChart);\r\n  \r\n  function updateChart(data) {\r\n      const options = createOptions(data);\r\n      myChart.setOption({ ...chartOption, options });\r\n  }\r\n  \r\n  function createOptions(data) {\r\n      const counts = Array.from({ length: phases.length }, () => Array(province.length).fill(0)); //创建二维数组用于存储每个时期的各省数据\r\n  \r\n      data.forEach(item => {\r\n          const year = parseInt(item.版本年代);\r\n          phases.forEach((phase, phaseIndex) => {\r\n              if (year >= phase.start && year <= phase.end) {\r\n                  province.forEach((prov, index) => {\r\n                      if (item.居地.includes(prov)) counts[phaseIndex][index]++;\r\n                  });\r\n              }\r\n          });\r\n      });\r\n  \r\n      return phases.map((_, i) => createPhaseOption(counts[i]));\r\n  }\r\n  \r\n  function createPhaseOption(counts) {\r\n      const sortedData = counts.map((value, i) => ({ name: province[i], value })).sort((a, b) => b.value - a.value);\r\n      const names = sortedData.slice(0, 10).map(item => item.name);\r\n      const values = sortedData.slice(0, 10).map(item => item.value);\r\n  \r\n      return {\r\n          yAxis: { data: names },\r\n          series: [\r\n              { type: 'map', data: sortedData },\r\n              { type: 'bar', data: values, itemStyle: { normal: { color: getColor } } }\r\n          ]\r\n      };\r\n  }\r\n  \r\n  function getColor(params) {\r\n      const colorList = [{\r\n          colorStops: [{\r\n              offset: 0,\r\n              color: '#BD430A' // 0% 处的颜色\r\n          }, {\r\n              offset: 1,\r\n              color: '#BD430A' // 100% 处的颜色\r\n          }]\r\n      },\r\n      {\r\n          colorStops: [{\r\n              offset: 0,\r\n              color: '#BD430A' // 0% 处的颜色\r\n          }, {\r\n              offset: 1,\r\n              color: '#BD430A' // 100% 处的颜色\r\n          }]\r\n      }\r\n      ];\r\n      return colorList[params.dataIndex < 3 ? 0 : 1];\r\n  }\r\n  </script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;EACSA,KAAK,EAAC;AAAO;;EAEXC,GAAG,EAAC,OAAO;EAACC,KAA4D,EAA5D;IAAA;IAAA;IAAA;EAAA;;;uBAFnBC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,iEAAgE,EAChEC,mBAAA,CAAoF,OAApFC,UAAoF,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}