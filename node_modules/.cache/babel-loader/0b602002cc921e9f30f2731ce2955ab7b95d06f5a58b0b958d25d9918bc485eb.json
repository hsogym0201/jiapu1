{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"world-cloud-3d\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _cache[0] || (_cache[0] = [_createElementVNode(\"div\", {\n    class: \"world-cloud-canvas-wrapper\"\n  }, [_createElementVNode(\"canvas\", {\n    id: \"world-cloud-canvas\",\n    width: \"400\",\n    height: \"200\",\n    style: {\n      \"width\": \"100%\",\n      \"max-width\": \"400px\"\n    }\n  })], -1 /* HOISTED */), _createElementVNode(\"div\", {\n    style: {\n      \"display\": \"none\"\n    },\n    id: \"weightTags\"\n  }, null, -1 /* HOISTED */)]));\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_cache","_createElementVNode","id","width","height","style"],"sources":["D:\\下载\\jiapudemo1\\src\\components\\CiYun.vue"],"sourcesContent":["<template>\r\n  <div class=\"world-cloud-3d\">\r\n    <div class=\"world-cloud-canvas-wrapper\">\r\n      <canvas\r\n          id=\"world-cloud-canvas\"\r\n          width=\"400\"\r\n          height=\"200\"\r\n          style=\"width: 100%; max-width: 400px\"\r\n      >\r\n      </canvas>\r\n    </div>\r\n    <div style=\"display: none\" id=\"weightTags\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: function () {\r\n    return {};\r\n  },\r\n  props: {\r\n    wordArr: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n  },\r\n  methods: {\r\n    // 启动词云\r\n    startWorldCloud: function (updateFlag) {\r\n      this.createTagListDom();\r\n      let o = {\r\n        maxSpeed: 0.01, // 添加最大的运动速度\r\n        minSpeed: 0.01, // 添加最小的运动速度这样就可以保证一直运动，不会停止\r\n        textHeight: 25,\r\n        outlineMethod: \"colour\", // tag hover 之后的 轮廓效果\r\n        fadeIn: 800,\r\n        outlineColour: \"#fff456aa\",\r\n        outlineOffset: 0,\r\n        depth: 0.97,\r\n        minBrightness: 0.2,\r\n        wheelZoom: false,\r\n        reverse: true, // 运动方向与鼠标移动方向相反\r\n        shadowBlur: 2,\r\n        shuffleTags: true,\r\n        shadowOffset: [1, 1],\r\n        stretchX: 1.7, // Stretch or compress the cloud horizontally. 水平拉伸词云\r\n        initial: [0.1, 0.1], // 给词云添加一个初始的运动方向\r\n        textFont: null, // 字体设置为 null 就会继承 每个 tag的a 标签的字体\r\n        textColour: null, // 字体颜色设置为 null 就会继承 每个 tag的a 标签的字体颜色\r\n        weight: true, // weight 打开，就可以根据默认的字体的大小作为权重，对tag 的样式进行调整\r\n        weightMode: \"size\", // 样式调整的方式\r\n        weightSize: 1, // 调整 tag 字体的大小，加个 权重\r\n      };\r\n      try {\r\n        // 如果不是更新，说明是第一次渲染，就启动 tagcanvas, 否则就代表更新\r\n        if (!updateFlag) {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Start(\"world-cloud-canvas\", \"weightTags\", o);\r\n        } else {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Update(\"world-cloud-canvas\");\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    // 根据父组件传过来的 wordArr 创建 TagList Dom列表，放到页面中供，canvas 渲染\r\n    // 这里后端的数组中的数据结构是一个对象 { name: 要展示的tag名字， light: true/false 据定是否要加重展示}\r\n    createTagListDom: function () {\r\n      let res = [...this.wordArr];\r\n      let fragment = new DocumentFragment();\r\n      for (let i = 0; i < res.length; i++) {\r\n        let a = document.createElement(\"a\");\r\n        // 字符串长度大于10就要换行\r\n        if (res[i].name.length > 10) {\r\n          let charArr = res[i].name.split(\"\");\r\n          charArr.splice(10, 0, \"<br>\");\r\n          res[i].name = charArr.join(\"\");\r\n        }\r\n        a.innerHTML = res[i].name;\r\n        a.href = \"javascript:void(0)\";\r\n        // 如果是要加重展示就设置属性为 huge 或 large, 否则就设置属性为 medium 或 small\r\n        if (res[i].light) {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"huge\" : \"large\";\r\n        } else {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"medium\" : \"small\";\r\n        }\r\n        // 为每个词添加点击事件，触发反馈信息\r\n        a.addEventListener(\"click\", () => {\r\n          // 触发 Vue 组件自定义事件并传递点击的词数据\r\n          this.$emit(\"word-clicked\", res[i]);\r\n        });\r\n        fragment.append(a);\r\n      }\r\n      // 更新 tagContainer中的 tag元素\r\n      let tagsContainer = document.querySelector(\"#weightTags\");\r\n      tagsContainer.innerHTML = \"\";\r\n      tagsContainer.append(fragment);\r\n    }\r\n  },\r\n  watch: {\r\n    // 如果词云发生变化就要 重绘 tagcanvas\r\n    wordArr: function () {\r\n      this.startWorldCloud(true);\r\n    },\r\n  },\r\n  mounted() {\r\n    // 组件装载成果 绘制 tagcanvas\r\n    this.startWorldCloud();\r\n  },\r\n};\r\n</script>\r\n// 这里 style 不能加scope属性不然就不会成功\r\n<style lang=\"less\">\r\n.world-cloud-3d {\r\n  .world-cloud-canvas-wrapper {\r\n    width: 400px;\r\n    height: 200px;\r\n    max-width: 400px;\r\n    max-height: 200px;\r\n  }\r\n  #weightTags {\r\n    font-size: 12px;\r\n    .huge {\r\n      font-size: 50px;\r\n      color: #f5576caa;\r\n    }\r\n    .large {\r\n      font-size: 40px;\r\n      color: #38f9d7aa;\r\n    }\r\n    .medium {\r\n      font-size: 30px;\r\n      color: #a18cd1aa;\r\n    }\r\n    .small {\r\n      font-size: 20px;\r\n      color: #a18cd1aa;\r\n    }\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;uBAA3BC,mBAAA,CAWM,OAXNC,UAWM,EAAAC,MAAA,QAAAA,MAAA,OAVJC,mBAAA,CAQM;IARDJ,KAAK,EAAC;EAA4B,IACrCI,mBAAA,CAMS;IALLC,EAAE,EAAC,oBAAoB;IACvBC,KAAK,EAAC,KAAK;IACXC,MAAM,EAAC,KAAK;IACZC,KAAqC,EAArC;MAAA;MAAA;IAAA;0BAINJ,mBAAA,CAAiD;IAA5CI,KAAqB,EAArB;MAAA;IAAA,CAAqB;IAACH,EAAE,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}