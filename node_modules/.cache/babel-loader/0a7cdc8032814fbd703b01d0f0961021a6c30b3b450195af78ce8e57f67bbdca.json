{"ast":null,"code":"export default {\n  data: function () {\n    return {};\n  },\n  props: {\n    wordArr: {\n      type: Array,\n      default: () => []\n    }\n  },\n  methods: {\n    // 启动词云\n    startWorldCloud: function (updateFlag) {\n      this.createTagListDom();\n      let o = {\n        maxSpeed: 0.01,\n        minSpeed: 0.01,\n        textHeight: 25,\n        outlineMethod: \"colour\",\n        fadeIn: 800,\n        outlineColour: \"#fff456aa\",\n        outlineOffset: 0,\n        depth: 0.97,\n        minBrightness: 0.2,\n        wheelZoom: false,\n        reverse: true,\n        shadowBlur: 2,\n        shuffleTags: true,\n        shadowOffset: [1, 1],\n        stretchX: 2,\n        // 水平方向更大\n        stretchY: 1,\n        // 垂直方向更大\n        initial: [0.1, 0.1],\n        textFont: null,\n        textColour: null,\n        weight: true,\n        weightMode: \"size\",\n        weightSize: 1\n      };\n      try {\n        // 如果不是更新，说明是第一次渲染，就启动 tagcanvas, 否则就代表更新\n        if (!updateFlag) {\n          // eslint-disable-next-line no-undef\n          TagCanvas.Start(\"world-cloud-canvas\", \"weightTags\", o);\n        } else {\n          // eslint-disable-next-line no-undef\n          TagCanvas.Update(\"world-cloud-canvas\");\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    },\n    // 根据父组件传过来的 wordArr 创建 TagList Dom列表，放到页面中供，canvas 渲染\n    // 这里后端的数组中的数据结构是一个对象 { name: 要展示的tag名字， light: true/false 据定是否要加重展示}\n    createTagListDom: function () {\n      let res = [...this.wordArr];\n      let fragment = new DocumentFragment();\n      for (let i = 0; i < res.length; i++) {\n        let a = document.createElement(\"a\");\n        // 字符串长度大于10就要换行\n        if (res[i].name.length > 10) {\n          let charArr = res[i].name.split(\"\");\n          charArr.splice(10, 0, \"<br>\");\n          res[i].name = charArr.join(\"\");\n        }\n        a.innerHTML = res[i].name;\n        a.href = \"javascript:void(0)\";\n        // 如果是要加重展示就设置属性为 huge 或 large, 否则就设置属性为 medium 或 small\n        if (res[i].light) {\n          let randomValue = Math.random();\n          a.className = randomValue > 0.5 ? \"huge\" : \"large\";\n        } else {\n          let randomValue = Math.random();\n          a.className = randomValue > 0.5 ? \"medium\" : \"small\";\n        }\n        // 为每个词添加点击事件，触发反馈信息\n        a.addEventListener(\"click\", () => {\n          // 触发 Vue 组件自定义事件并传递点击的词数据\n          this.$emit(\"word-clicked\", res[i]);\n        });\n        fragment.append(a);\n      }\n      // 更新 tagContainer中的 tag元素\n      let tagsContainer = document.querySelector(\"#weightTags\");\n      tagsContainer.innerHTML = \"\";\n      tagsContainer.append(fragment);\n    }\n  },\n  watch: {\n    // 如果词云发生变化就要 重绘 tagcanvas\n    wordArr: function () {\n      this.startWorldCloud(true);\n    }\n  },\n  mounted() {\n    // 组件装载成果 绘制 tagcanvas\n    this.startWorldCloud();\n  }\n};","map":{"version":3,"names":["data","props","wordArr","type","Array","default","methods","startWorldCloud","updateFlag","createTagListDom","o","maxSpeed","minSpeed","textHeight","outlineMethod","fadeIn","outlineColour","outlineOffset","depth","minBrightness","wheelZoom","reverse","shadowBlur","shuffleTags","shadowOffset","stretchX","stretchY","initial","textFont","textColour","weight","weightMode","weightSize","TagCanvas","Start","Update","e","console","error","res","fragment","DocumentFragment","i","length","a","document","createElement","name","charArr","split","splice","join","innerHTML","href","light","randomValue","Math","random","className","addEventListener","$emit","append","tagsContainer","querySelector","watch","mounted"],"sources":["D:\\00demo\\jiapudemo1\\src\\components\\CiYun.vue"],"sourcesContent":["<!--\r\n<template>\r\n  <div class=\"world-cloud-3d\">\r\n    <div class=\"world-cloud-canvas-wrapper\">\r\n      <canvas\r\n          id=\"world-cloud-canvas\"\r\n          width=\"800\"\r\n          height=\"400\"\r\n          style=\"width: 100%; max-width: 400px\"\r\n      >\r\n      </canvas>\r\n    </div>\r\n    <div style=\"display: none\" id=\"weightTags\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: function () {\r\n    return {};\r\n  },\r\n  props: {\r\n    wordArr: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n  },\r\n  methods: {\r\n    // 启动词云\r\n    startWorldCloud: function (updateFlag) {\r\n      this.createTagListDom();\r\n      let o = {\r\n        maxSpeed: 0.01, // 添加最大的运动速度\r\n        minSpeed: 0.01, // 添加最小的运动速度这样就可以保证一直运动，不会停止\r\n        textHeight: 25,\r\n        outlineMethod: \"colour\", // tag hover 之后的 轮廓效果\r\n        fadeIn: 800,\r\n        outlineColour: \"#fff456aa\",\r\n        outlineOffset: 0,\r\n        depth: 0.97,\r\n        minBrightness: 0.2,\r\n        wheelZoom: false,\r\n        reverse: true, // 运动方向与鼠标移动方向相反\r\n        shadowBlur: 2,\r\n        shuffleTags: true,\r\n        shadowOffset: [1, 1],\r\n        stretchX: 1.7, // Stretch or compress the cloud horizontally. 水平拉伸词云\r\n        initial: [0.1, 0.1], // 给词云添加一个初始的运动方向\r\n        textFont: null, // 字体设置为 null 就会继承 每个 tag的a 标签的字体\r\n        textColour: null, // 字体颜色设置为 null 就会继承 每个 tag的a 标签的字体颜色\r\n        weight: true, // weight 打开，就可以根据默认的字体的大小作为权重，对tag 的样式进行调整\r\n        weightMode: \"size\", // 样式调整的方式\r\n        weightSize: 1, // 调整 tag 字体的大小，加个 权重\r\n      };\r\n      try {\r\n        // 如果不是更新，说明是第一次渲染，就启动 tagcanvas, 否则就代表更新\r\n        if (!updateFlag) {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Start(\"world-cloud-canvas\", \"weightTags\", o);\r\n        } else {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Update(\"world-cloud-canvas\");\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    // 根据父组件传过来的 wordArr 创建 TagList Dom列表，放到页面中供，canvas 渲染\r\n    // 这里后端的数组中的数据结构是一个对象 { name: 要展示的tag名字， light: true/false 据定是否要加重展示}\r\n    createTagListDom: function () {\r\n      let res = [...this.wordArr];\r\n      let fragment = new DocumentFragment();\r\n      for (let i = 0; i < res.length; i++) {\r\n        let a = document.createElement(\"a\");\r\n        // 字符串长度大于10就要换行\r\n        if (res[i].name.length > 10) {\r\n          let charArr = res[i].name.split(\"\");\r\n          charArr.splice(10, 0, \"<br>\");\r\n          res[i].name = charArr.join(\"\");\r\n        }\r\n        a.innerHTML = res[i].name;\r\n        a.href = \"javascript:void(0)\";\r\n        // 如果是要加重展示就设置属性为 huge 或 large, 否则就设置属性为 medium 或 small\r\n        if (res[i].light) {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"huge\" : \"large\";\r\n        } else {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"medium\" : \"small\";\r\n        }\r\n        // 为每个词添加点击事件，触发反馈信息\r\n        a.addEventListener(\"click\", () => {\r\n          // 触发 Vue 组件自定义事件并传递点击的词数据\r\n          this.$emit(\"word-clicked\", res[i]);\r\n        });\r\n        fragment.append(a);\r\n      }\r\n      // 更新 tagContainer中的 tag元素\r\n      let tagsContainer = document.querySelector(\"#weightTags\");\r\n      tagsContainer.innerHTML = \"\";\r\n      tagsContainer.append(fragment);\r\n    }\r\n  },\r\n  watch: {\r\n    // 如果词云发生变化就要 重绘 tagcanvas\r\n    wordArr: function () {\r\n      this.startWorldCloud(true);\r\n    },\r\n  },\r\n  mounted() {\r\n    // 组件装载成果 绘制 tagcanvas\r\n    this.startWorldCloud();\r\n  },\r\n};\r\n</script>\r\n// 这里 style 不能加scope属性不然就不会成功\r\n<style lang=\"less\">\r\n.world-cloud-3d {\r\n  .world-cloud-canvas-wrapper {\r\n    width: 400px;\r\n    height: 200px;\r\n    max-width: 400px;\r\n    max-height: 200px;\r\n  }\r\n  #weightTags {\r\n    font-size: 12px;\r\n    .huge {\r\n      font-size: 50px;\r\n      color: #f5576caa;\r\n    }\r\n    .large {\r\n      font-size: 40px;\r\n      color: #38f9d7aa;\r\n    }\r\n    .medium {\r\n      font-size: 30px;\r\n      color: #a18cd1aa;\r\n    }\r\n    .small {\r\n      font-size: 20px;\r\n      color: #a18cd1aa;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n-->\r\n\r\n\r\n<template>\r\n  <div class=\"world-cloud-3d\">\r\n    <div class=\"world-cloud-canvas-wrapper\">\r\n      <canvas\r\n          id=\"world-cloud-canvas\"\r\n          width=\"800\"\r\n          height=\"400\"\r\n          style=\"width: 100%; max-width: 600px\"\r\n      ></canvas>\r\n    </div>\r\n    <div style=\"display: none\" id=\"weightTags\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data: function () {\r\n    return {};\r\n  },\r\n  props: {\r\n    wordArr: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n  },\r\n  methods: {\r\n    // 启动词云\r\n    startWorldCloud: function (updateFlag) {\r\n      this.createTagListDom();\r\n      let o = {\r\n        maxSpeed: 0.01,\r\n        minSpeed: 0.01,\r\n        textHeight: 25,\r\n        outlineMethod: \"colour\",\r\n        fadeIn: 800,\r\n        outlineColour: \"#fff456aa\",\r\n        outlineOffset: 0,\r\n        depth: 0.97,\r\n        minBrightness: 0.2,\r\n        wheelZoom: false,\r\n        reverse: true,\r\n        shadowBlur: 2,\r\n        shuffleTags: true,\r\n        shadowOffset: [1, 1],\r\n        stretchX: 2, // 水平方向更大\r\n        stretchY: 1, // 垂直方向更大\r\n        initial: [0.1, 0.1],\r\n        textFont: null,\r\n        textColour: null,\r\n        weight: true,\r\n        weightMode: \"size\",\r\n        weightSize: 1,\r\n      };\r\n      try {\r\n        // 如果不是更新，说明是第一次渲染，就启动 tagcanvas, 否则就代表更新\r\n        if (!updateFlag) {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Start(\"world-cloud-canvas\", \"weightTags\", o);\r\n        } else {\r\n          // eslint-disable-next-line no-undef\r\n          TagCanvas.Update(\"world-cloud-canvas\");\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    },\r\n    // 根据父组件传过来的 wordArr 创建 TagList Dom列表，放到页面中供，canvas 渲染\r\n    // 这里后端的数组中的数据结构是一个对象 { name: 要展示的tag名字， light: true/false 据定是否要加重展示}\r\n    createTagListDom: function () {\r\n      let res = [...this.wordArr];\r\n      let fragment = new DocumentFragment();\r\n      for (let i = 0; i < res.length; i++) {\r\n        let a = document.createElement(\"a\");\r\n        // 字符串长度大于10就要换行\r\n        if (res[i].name.length > 10) {\r\n          let charArr = res[i].name.split(\"\");\r\n          charArr.splice(10, 0, \"<br>\");\r\n          res[i].name = charArr.join(\"\");\r\n        }\r\n        a.innerHTML = res[i].name;\r\n        a.href = \"javascript:void(0)\";\r\n        // 如果是要加重展示就设置属性为 huge 或 large, 否则就设置属性为 medium 或 small\r\n        if (res[i].light) {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"huge\" : \"large\";\r\n        } else {\r\n          let randomValue = Math.random();\r\n          a.className = randomValue > 0.5 ? \"medium\" : \"small\";\r\n        }\r\n        // 为每个词添加点击事件，触发反馈信息\r\n        a.addEventListener(\"click\", () => {\r\n          // 触发 Vue 组件自定义事件并传递点击的词数据\r\n          this.$emit(\"word-clicked\", res[i]);\r\n        });\r\n        fragment.append(a);\r\n      }\r\n      // 更新 tagContainer中的 tag元素\r\n      let tagsContainer = document.querySelector(\"#weightTags\");\r\n      tagsContainer.innerHTML = \"\";\r\n      tagsContainer.append(fragment);\r\n    }\r\n  },\r\n  watch: {\r\n    // 如果词云发生变化就要 重绘 tagcanvas\r\n    wordArr: function () {\r\n      this.startWorldCloud(true);\r\n    },\r\n  },\r\n  mounted() {\r\n    // 组件装载成果 绘制 tagcanvas\r\n    this.startWorldCloud();\r\n  },\r\n};\r\n</script>\r\n// 这里 style 不能加scope属性不然就不会成功\r\n<style lang=\"less\">\r\n.world-cloud-3d {\r\n  .world-cloud-canvas-wrapper {\r\n    width: 600px;\r\n    height: 400px;\r\n    max-width: 600px;\r\n    max-height: 400px;\r\n    overflow: visible; // 确保文字不被截断\r\n    padding: 20px; // 给文字和边界预留空间\r\n  }\r\n  #weightTags {\r\n    font-size: 12px;\r\n    .huge {\r\n      font-size: 40px;\r\n      color: #f5576caa;\r\n    }\r\n    .large {\r\n      font-size: 30px;\r\n      color: #38f9d7aa;\r\n    }\r\n    .medium {\r\n      font-size: 20px;\r\n      color: #a18cd1aa;\r\n    }\r\n    .small {\r\n      font-size: 10px;\r\n      color: #a18cd1aa;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}