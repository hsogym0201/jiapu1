{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { onMounted, ref } from 'vue';\nimport * as echarts from 'echarts';\nimport emitter from '@/utils/emitter';\nimport Chinamap from '../assets/china.json';\nimport MyData from '../assets/new.json';\nexport default {\n  __name: 'DiTu1',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const province = ['北京', '天津', '河北', '山西', '内蒙古', '辽宁', '吉林', '黑龙江', '上海', '江苏', '浙江', '安徽', '福建', '江西', '山东', '河南', '湖北', '湖南', '广东', '广西', '海南', '重庆', '四川', '贵州', '云南', '西藏', '陕西', '甘肃', '青海', '宁夏', '新疆', '台湾', '澳门', '香港'];\n    const phases = [{\n      start: 1600,\n      end: 1700\n    }, {\n      start: 1701,\n      end: 1800\n    }, {\n      start: 1801,\n      end: 1900\n    }, {\n      start: 1901,\n      end: 2000\n    }, {\n      start: 2001,\n      end: 2024\n    }];\n    let myChart;\n    const chart = ref();\n    const phasesName = ['17世纪', '18世纪', '19世纪', '20世纪', '21世纪'];\n    const chartOption = {\n      baseOption: {\n        timeline: {\n          axisType: 'category',\n          // realtime: false,\n          autoPlay: true,\n          playInterval: 3000,\n          symbolSize: 16,\n          left: '5%',\n          right: '5%',\n          bottom: '0%',\n          width: '90%',\n          // controlStyle: {\n          //     position: 'left'\n          // },\n          data: phasesName,\n          tooltip: {\n            formatter: phases\n          }\n        },\n        tooltip: {\n          show: true,\n          formatter: function (params) {\n            return params.name + '：' + params.value;\n          }\n        },\n        visualMap: {\n          type: 'piecewise',\n          pieces: [{\n            min: 1000,\n            max: 10000,\n            color: '#BD430A'\n          }, {\n            min: 501,\n            max: 1000,\n            color: '#E08150'\n          }, {\n            min: 101,\n            max: 500,\n            color: '#E9B090'\n          }, {\n            min: 1,\n            max: 100,\n            color: '#F2DDD2'\n          }, {\n            value: 0,\n            color: 'white'\n          }],\n          orient: 'vertical',\n          itemWidth: 25,\n          itemHeight: 15,\n          showLabel: true,\n          seriesIndex: [0],\n          textStyle: {\n            color: '#7B93A7'\n          },\n          bottom: '10%',\n          left: \"5%\"\n        },\n        grid: {\n          right: '5%',\n          top: '20%',\n          bottom: '10%',\n          width: '20%'\n        },\n        xAxis: {\n          // min: 0,\n          // max: 4000,\n          scale: true,\n          show: false\n        },\n        yAxis: [{\n          inverse: true,\n          offset: '2',\n          'type': 'category',\n          data: '',\n          nameTextStyle: {\n            color: '#fff'\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            //rotate:45,\n            textStyle: {\n              fontSize: 14,\n              color: '#000000'\n            },\n            interval: 0\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              color: '#333'\n            }\n          },\n          splitLine: {\n            show: false,\n            lineStyle: {\n              color: '#333'\n            }\n          }\n        }],\n        geo: {\n          map: 'china',\n          right: '35%',\n          left: '20%',\n          emphasis: {\n            label: {\n              show: false\n            },\n            itemStyle: {\n              areaColor: '#8792b3'\n            }\n          },\n          select: {\n            label: {\n              show: false\n            },\n            itemStyle: {\n              areaColor: '#8792b3'\n            }\n          },\n          selectedMode: 'single'\n          //   label: {\n          //       emphasis: {\n          //           show: false\n          //       }\n          //   },\n          //   itemStyle: {\n          //       emphasis: {\n          //           areaColor: '#8792b3'\n          //       }\n          //   }\n        },\n        series: [{\n          name: 'mapSer',\n          type: 'map',\n          map: 'china',\n          roam: false,\n          geoIndex: 0,\n          label: {\n            show: false\n          }\n        }, {\n          'name': '',\n          'type': 'bar',\n          zlevel: 2,\n          barWidth: '40%',\n          label: {\n            normal: {\n              show: true,\n              fontSize: 14,\n              position: 'right',\n              formatter: '{c}'\n            }\n          }\n        }]\n      },\n      animationDurationUpdate: 3000,\n      animationEasingUpdate: 'quinticInOut',\n      options: []\n    };\n    onMounted(() => {\n      echarts.registerMap('china', Chinamap);\n      myChart = echarts.init(chart.value);\n      updateChart(MyData);\n    });\n    emitter.on('data', updateChart);\n    function updateChart(data) {\n      const options = createOptions(data);\n      myChart.setOption({\n        ...chartOption,\n        options\n      });\n    }\n    function createOptions(data) {\n      const counts = Array.from({\n        length: phases.length\n      }, () => Array(province.length).fill(0));\n      //创建二维数组用于存储每个时期的各省数据\n      data.forEach(item => {\n        const year = parseInt(item.版本年代);\n        phases.forEach((phase, phaseIndex) => {\n          if (year >= phase.start && year <= phase.end) {\n            province.forEach((prov, index) => {\n              if (item.居地.includes(prov)) counts[phaseIndex][index]++;\n            });\n          }\n        });\n      });\n      return phases.map((_, i) => createPhaseOption(counts[i]));\n    }\n    function createPhaseOption(counts) {\n      const sortedData = counts.map((value, i) => ({\n        name: province[i],\n        value\n      })).sort((a, b) => b.value - a.value);\n      const names = sortedData.slice(0, 10).map(item => item.name);\n      const values = sortedData.slice(0, 10).map(item => item.value);\n      return {\n        yAxis: {\n          data: names\n        },\n        series: [{\n          type: 'map',\n          data: sortedData\n        }, {\n          type: 'bar',\n          data: values,\n          itemStyle: {\n            normal: {\n              color: getColor\n            }\n          }\n        }]\n      };\n    }\n    function getColor(params) {\n      const colorList = [{\n        colorStops: [{\n          offset: 0,\n          color: '#BD430A' // 0% 处的颜色\n        }, {\n          offset: 1,\n          color: '#BD430A' // 100% 处的颜色\n        }]\n      }, {\n        colorStops: [{\n          offset: 0,\n          color: '#BD430A' // 0% 处的颜色\n        }, {\n          offset: 1,\n          color: '#BD430A' // 100% 处的颜色\n        }]\n      }];\n      return colorList[params.dataIndex < 3 ? 0 : 1];\n    }\n    const __returned__ = {\n      province,\n      phases,\n      get myChart() {\n        return myChart;\n      },\n      set myChart(v) {\n        myChart = v;\n      },\n      chart,\n      phasesName,\n      chartOption,\n      updateChart,\n      createOptions,\n      createPhaseOption,\n      getColor,\n      onMounted,\n      ref,\n      get echarts() {\n        return echarts;\n      },\n      get emitter() {\n        return emitter;\n      },\n      get Chinamap() {\n        return Chinamap;\n      },\n      get MyData() {\n        return MyData;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","echarts","emitter","Chinamap","MyData","province","phases","start","end","myChart","chart","phasesName","chartOption","baseOption","timeline","axisType","autoPlay","playInterval","symbolSize","left","right","bottom","width","data","tooltip","formatter","show","params","name","value","visualMap","type","pieces","min","max","color","orient","itemWidth","itemHeight","showLabel","seriesIndex","textStyle","grid","top","xAxis","scale","yAxis","inverse","offset","nameTextStyle","axisTick","axisLabel","fontSize","interval","axisLine","lineStyle","splitLine","geo","map","emphasis","label","itemStyle","areaColor","select","selectedMode","series","roam","geoIndex","zlevel","barWidth","normal","position","animationDurationUpdate","animationEasingUpdate","options","registerMap","init","updateChart","on","createOptions","setOption","counts","Array","from","length","fill","forEach","item","year","parseInt","版本年代","phase","phaseIndex","prov","index","居地","includes","_","i","createPhaseOption","sortedData","sort","a","b","names","slice","values","getColor","colorList","colorStops","dataIndex"],"sources":["D:/00demo/jiapudemo1/src/components/DiTu1.vue"],"sourcesContent":["<template>\r\n    <div class=\"DiTu1\">\r\n      <!-- <div ref=\"chart\" style=\"border: 2px solid gray;\"></div> -->\r\n      <div ref=\"chart\" style=\"width: 600px; height: 400px; border: 1px solid gray;\"></div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { onMounted, ref } from 'vue';\r\n  import * as echarts from 'echarts';\r\n  import emitter from '@/utils/emitter';\r\n  import Chinamap from '../assets/china.json';\r\n  import MyData from '../assets/new.json';\r\n  \r\n  const province = [\r\n      '北京', '天津', '河北', '山西', '内蒙古', '辽宁', '吉林',\r\n      '黑龙江', '上海', '江苏', '浙江', '安徽', '福建', '江西',\r\n      '山东', '河南', '湖北', '湖南', '广东', '广西', '海南',\r\n      '重庆', '四川', '贵州', '云南', '西藏', '陕西', '甘肃',\r\n      '青海', '宁夏', '新疆', '台湾', '澳门', '香港'\r\n  ];\r\n  \r\n  const phases = [\r\n      { start: 1600, end: 1700 },\r\n      { start: 1701, end: 1800 },\r\n      { start: 1801, end: 1900 },\r\n      { start: 1901, end: 2000 },\r\n      { start: 2001, end: 2024 }\r\n  ];\r\n  \r\n  let myChart;\r\n  const chart = ref();\r\n  const phasesName = ['17世纪', '18世纪', '19世纪', '20世纪', '21世纪'];\r\n  \r\n  const chartOption = {\r\n      baseOption: {\r\n          timeline: {\r\n              axisType: 'category',\r\n              // realtime: false,\r\n              autoPlay: true,\r\n              playInterval: 3000,\r\n              symbolSize: 16,\r\n              left: '5%',\r\n              right: '5%',\r\n              bottom: '0%',\r\n              width: '90%',\r\n              // controlStyle: {\r\n              //     position: 'left'\r\n              // },\r\n              data: phasesName,\r\n              tooltip: {\r\n                  formatter: phases,\r\n              },\r\n          },\r\n          tooltip: {\r\n              show: true,\r\n              formatter: function (params) {\r\n                  return params.name + '：' + params.value\r\n              },\r\n          },\r\n          visualMap: {\r\n              type: 'piecewise',\r\n              pieces: [\r\n                  {\r\n                      min: 1000,\r\n                      max: 10000,\r\n                      color: '#BD430A'\r\n                  },\r\n                  {\r\n                      min: 501,\r\n                      max: 1000,\r\n                      color: '#E08150'\r\n                  },\r\n                  {\r\n                      min: 101,\r\n                      max: 500,\r\n                      color: '#E9B090'\r\n                  },\r\n                  {\r\n                      min: 1,\r\n                      max: 100,\r\n                      color: '#F2DDD2'\r\n                  },\r\n                  {\r\n                      value: 0,\r\n                      color: 'white'\r\n                  }\r\n              ],\r\n              orient: 'vertical',\r\n              itemWidth: 25,\r\n              itemHeight: 15,\r\n              showLabel: true,\r\n              seriesIndex: [0],\r\n  \r\n              textStyle: {\r\n                  color: '#7B93A7'\r\n              },\r\n              bottom: '10%',\r\n              left: \"5%\",\r\n          },\r\n          grid: {\r\n              right: '5%',\r\n              top: '20%',\r\n              bottom: '10%',\r\n              width: '20%'\r\n          },\r\n          xAxis: {\r\n              // min: 0,\r\n              // max: 4000,\r\n              scale: true,\r\n              show: false\r\n          },\r\n          yAxis: [{\r\n              inverse: true,\r\n              offset: '2',\r\n              'type': 'category',\r\n              data: '',\r\n              nameTextStyle: {\r\n                  color: '#fff'\r\n              },\r\n              axisTick: {\r\n                  show: false,\r\n              },\r\n              axisLabel: {\r\n                  //rotate:45,\r\n                  textStyle: {\r\n                      fontSize: 14,\r\n                      color: '#000000',\r\n                  },\r\n                  interval: 0\r\n              },\r\n              axisLine: {\r\n                  show: false,\r\n                  lineStyle: {\r\n                      color: '#333'\r\n                  },\r\n              },\r\n              splitLine: {\r\n                  show: false,\r\n                  lineStyle: {\r\n                      color: '#333'\r\n                  }\r\n              },\r\n          }],\r\n          geo: {\r\n              map: 'china',\r\n              right: '35%',\r\n              left: '20%',\r\n              emphasis: {\r\n                label: {\r\n                    show:false\r\n                },\r\n                itemStyle: {\r\n                    areaColor: '#8792b3'\r\n                }\r\n              },\r\n              select: {\r\n                label: {\r\n                    show: false\r\n                },\r\n                itemStyle: {\r\n                    areaColor: '#8792b3' \r\n                }\r\n              },\r\n              selectedMode: 'single',\r\n            //   label: {\r\n            //       emphasis: {\r\n            //           show: false\r\n            //       }\r\n            //   },\r\n            //   itemStyle: {\r\n            //       emphasis: {\r\n            //           areaColor: '#8792b3'\r\n            //       }\r\n            //   }\r\n          },\r\n          series: [{\r\n              name: 'mapSer',\r\n              type: 'map',\r\n              map: 'china',\r\n              roam: false,\r\n              geoIndex: 0,\r\n              label: {\r\n                  show: false,\r\n              },\r\n          },\r\n          {\r\n              'name': '',\r\n              'type': 'bar',\r\n              zlevel: 2,\r\n              barWidth: '40%',\r\n              label: {\r\n                  normal: {\r\n                      show: true,\r\n                      fontSize: 14,\r\n                      position: 'right',\r\n                      formatter: '{c}'\r\n                  }\r\n              },\r\n          }\r\n          ],\r\n      },\r\n      animationDurationUpdate: 3000,\r\n      animationEasingUpdate: 'quinticInOut',\r\n      options: []\r\n  };\r\n  \r\n  \r\n  onMounted(() => {\r\n      echarts.registerMap('china', Chinamap);\r\n      myChart = echarts.init(chart.value);\r\n      updateChart(MyData);\r\n  });\r\n  \r\n  emitter.on('data', updateChart);\r\n  \r\n  function updateChart(data) {\r\n      const options = createOptions(data);\r\n      myChart.setOption({ ...chartOption, options });\r\n  }\r\n  \r\n  function createOptions(data) {\r\n      const counts = Array.from({ length: phases.length }, () => Array(province.length).fill(0)); \r\n      //创建二维数组用于存储每个时期的各省数据\r\n      data.forEach(item => {\r\n          const year = parseInt(item.版本年代);\r\n          phases.forEach((phase, phaseIndex) => {\r\n              if (year >= phase.start && year <= phase.end) {\r\n                  province.forEach((prov, index) => {\r\n                      if (item.居地.includes(prov)) counts[phaseIndex][index]++;\r\n                  });\r\n              }\r\n          });\r\n      });\r\n  \r\n      return phases.map((_, i) => createPhaseOption(counts[i]));\r\n  }\r\n  \r\n  function createPhaseOption(counts) {\r\n      const sortedData = counts.map((value, i) => ({ name: province[i], value })).sort((a, b) => b.value - a.value);\r\n      const names = sortedData.slice(0, 10).map(item => item.name);\r\n      const values = sortedData.slice(0, 10).map(item => item.value);\r\n  \r\n      return {\r\n          yAxis: { data: names },\r\n          series: [\r\n              { type: 'map', data: sortedData },\r\n              { type: 'bar', data: values, itemStyle: { normal: { color: getColor } } }\r\n          ]\r\n      };\r\n  }\r\n  \r\n  function getColor(params) {\r\n      const colorList = [{\r\n          colorStops: [{\r\n              offset: 0,\r\n              color: '#BD430A' // 0% 处的颜色\r\n          }, {\r\n              offset: 1,\r\n              color: '#BD430A' // 100% 处的颜色\r\n          }]\r\n      },\r\n      {\r\n          colorStops: [{\r\n              offset: 0,\r\n              color: '#BD430A' // 0% 处的颜色\r\n          }, {\r\n              offset: 1,\r\n              color: '#BD430A' // 100% 处的颜色\r\n          }]\r\n      }\r\n      ];\r\n      return colorList[params.dataIndex < 3 ? 0 : 1];\r\n  }\r\n  </script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AAQE,SAASA,SAAS,EAAEC,GAAG,QAAQ,KAAK;AACpC,OAAO,KAAKC,OAAO,MAAM,SAAS;AAClC,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,MAAM,MAAM,oBAAoB;;;;;;;IAEvC,MAAMC,QAAQ,GAAG,CACb,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EACzC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACzC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACxC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACxC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACrC;IAED,MAAMC,MAAM,GAAG,CACX;MAAEC,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,EAC1B;MAAED,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,EAC1B;MAAED,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,EAC1B;MAAED,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,EAC1B;MAAED,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAAC,CAC7B;IAED,IAAIC,OAAO;IACX,MAAMC,KAAK,GAAGV,GAAG,CAAC,CAAC;IACnB,MAAMW,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;IAE3D,MAAMC,WAAW,GAAG;MAChBC,UAAU,EAAE;QACRC,QAAQ,EAAE;UACNC,QAAQ,EAAE,UAAU;UACpB;UACAC,QAAQ,EAAE,IAAI;UACdC,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE,EAAE;UACdC,IAAI,EAAE,IAAI;UACVC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE,IAAI;UACZC,KAAK,EAAE,KAAK;UACZ;UACA;UACA;UACAC,IAAI,EAAEZ,UAAU;UAChBa,OAAO,EAAE;YACLC,SAAS,EAAEnB;UACf;QACJ,CAAC;QACDkB,OAAO,EAAE;UACLE,IAAI,EAAE,IAAI;UACVD,SAAS,EAAE,SAAAA,CAAUE,MAAM,EAAE;YACzB,OAAOA,MAAM,CAACC,IAAI,GAAG,GAAG,GAAGD,MAAM,CAACE,KAAK;UAC3C;QACJ,CAAC;QACDC,SAAS,EAAE;UACPC,IAAI,EAAE,WAAW;UACjBC,MAAM,EAAE,CACJ;YACIC,GAAG,EAAE,IAAI;YACTC,GAAG,EAAE,KAAK;YACVC,KAAK,EAAE;UACX,CAAC,EACD;YACIF,GAAG,EAAE,GAAG;YACRC,GAAG,EAAE,IAAI;YACTC,KAAK,EAAE;UACX,CAAC,EACD;YACIF,GAAG,EAAE,GAAG;YACRC,GAAG,EAAE,GAAG;YACRC,KAAK,EAAE;UACX,CAAC,EACD;YACIF,GAAG,EAAE,CAAC;YACNC,GAAG,EAAE,GAAG;YACRC,KAAK,EAAE;UACX,CAAC,EACD;YACIN,KAAK,EAAE,CAAC;YACRM,KAAK,EAAE;UACX,CAAC,CACJ;UACDC,MAAM,EAAE,UAAU;UAClBC,SAAS,EAAE,EAAE;UACbC,UAAU,EAAE,EAAE;UACdC,SAAS,EAAE,IAAI;UACfC,WAAW,EAAE,CAAC,CAAC,CAAC;UAEhBC,SAAS,EAAE;YACPN,KAAK,EAAE;UACX,CAAC;UACDd,MAAM,EAAE,KAAK;UACbF,IAAI,EAAE;QACV,CAAC;QACDuB,IAAI,EAAE;UACFtB,KAAK,EAAE,IAAI;UACXuB,GAAG,EAAE,KAAK;UACVtB,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE;QACX,CAAC;QACDsB,KAAK,EAAE;UACH;UACA;UACAC,KAAK,EAAE,IAAI;UACXnB,IAAI,EAAE;QACV,CAAC;QACDoB,KAAK,EAAE,CAAC;UACJC,OAAO,EAAE,IAAI;UACbC,MAAM,EAAE,GAAG;UACX,MAAM,EAAE,UAAU;UAClBzB,IAAI,EAAE,EAAE;UACR0B,aAAa,EAAE;YACXd,KAAK,EAAE;UACX,CAAC;UACDe,QAAQ,EAAE;YACNxB,IAAI,EAAE;UACV,CAAC;UACDyB,SAAS,EAAE;YACP;YACAV,SAAS,EAAE;cACPW,QAAQ,EAAE,EAAE;cACZjB,KAAK,EAAE;YACX,CAAC;YACDkB,QAAQ,EAAE;UACd,CAAC;UACDC,QAAQ,EAAE;YACN5B,IAAI,EAAE,KAAK;YACX6B,SAAS,EAAE;cACPpB,KAAK,EAAE;YACX;UACJ,CAAC;UACDqB,SAAS,EAAE;YACP9B,IAAI,EAAE,KAAK;YACX6B,SAAS,EAAE;cACPpB,KAAK,EAAE;YACX;UACJ;QACJ,CAAC,CAAC;QACFsB,GAAG,EAAE;UACDC,GAAG,EAAE,OAAO;UACZtC,KAAK,EAAE,KAAK;UACZD,IAAI,EAAE,KAAK;UACXwC,QAAQ,EAAE;YACRC,KAAK,EAAE;cACHlC,IAAI,EAAC;YACT,CAAC;YACDmC,SAAS,EAAE;cACPC,SAAS,EAAE;YACf;UACF,CAAC;UACDC,MAAM,EAAE;YACNH,KAAK,EAAE;cACHlC,IAAI,EAAE;YACV,CAAC;YACDmC,SAAS,EAAE;cACPC,SAAS,EAAE;YACf;UACF,CAAC;UACDE,YAAY,EAAE;UAChB;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACF,CAAC;QACDC,MAAM,EAAE,CAAC;UACLrC,IAAI,EAAE,QAAQ;UACdG,IAAI,EAAE,KAAK;UACX2B,GAAG,EAAE,OAAO;UACZQ,IAAI,EAAE,KAAK;UACXC,QAAQ,EAAE,CAAC;UACXP,KAAK,EAAE;YACHlC,IAAI,EAAE;UACV;QACJ,CAAC,EACD;UACI,MAAM,EAAE,EAAE;UACV,MAAM,EAAE,KAAK;UACb0C,MAAM,EAAE,CAAC;UACTC,QAAQ,EAAE,KAAK;UACfT,KAAK,EAAE;YACHU,MAAM,EAAE;cACJ5C,IAAI,EAAE,IAAI;cACV0B,QAAQ,EAAE,EAAE;cACZmB,QAAQ,EAAE,OAAO;cACjB9C,SAAS,EAAE;YACf;UACJ;QACJ,CAAC;MAEL,CAAC;MACD+C,uBAAuB,EAAE,IAAI;MAC7BC,qBAAqB,EAAE,cAAc;MACrCC,OAAO,EAAE;IACb,CAAC;IAGD3E,SAAS,CAAC,MAAM;MACZE,OAAO,CAAC0E,WAAW,CAAC,OAAO,EAAExE,QAAQ,CAAC;MACtCM,OAAO,GAAGR,OAAO,CAAC2E,IAAI,CAAClE,KAAK,CAACmB,KAAK,CAAC;MACnCgD,WAAW,CAACzE,MAAM,CAAC;IACvB,CAAC,CAAC;IAEFF,OAAO,CAAC4E,EAAE,CAAC,MAAM,EAAED,WAAW,CAAC;IAE/B,SAASA,WAAWA,CAACtD,IAAI,EAAE;MACvB,MAAMmD,OAAO,GAAGK,aAAa,CAACxD,IAAI,CAAC;MACnCd,OAAO,CAACuE,SAAS,CAAC;QAAE,GAAGpE,WAAW;QAAE8D;MAAQ,CAAC,CAAC;IAClD;IAEA,SAASK,aAAaA,CAACxD,IAAI,EAAE;MACzB,MAAM0D,MAAM,GAAGC,KAAK,CAACC,IAAI,CAAC;QAAEC,MAAM,EAAE9E,MAAM,CAAC8E;MAAO,CAAC,EAAE,MAAMF,KAAK,CAAC7E,QAAQ,CAAC+E,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC1F;MACA9D,IAAI,CAAC+D,OAAO,CAACC,IAAI,IAAI;QACjB,MAAMC,IAAI,GAAGC,QAAQ,CAACF,IAAI,CAACG,IAAI,CAAC;QAChCpF,MAAM,CAACgF,OAAO,CAAC,CAACK,KAAK,EAAEC,UAAU,KAAK;UAClC,IAAIJ,IAAI,IAAIG,KAAK,CAACpF,KAAK,IAAIiF,IAAI,IAAIG,KAAK,CAACnF,GAAG,EAAE;YAC1CH,QAAQ,CAACiF,OAAO,CAAC,CAACO,IAAI,EAAEC,KAAK,KAAK;cAC9B,IAAIP,IAAI,CAACQ,EAAE,CAACC,QAAQ,CAACH,IAAI,CAAC,EAAEZ,MAAM,CAACW,UAAU,CAAC,CAACE,KAAK,CAAC,EAAE;YAC3D,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAOxF,MAAM,CAACoD,GAAG,CAAC,CAACuC,CAAC,EAAEC,CAAC,KAAKC,iBAAiB,CAAClB,MAAM,CAACiB,CAAC,CAAC,CAAC,CAAC;IAC7D;IAEA,SAASC,iBAAiBA,CAAClB,MAAM,EAAE;MAC/B,MAAMmB,UAAU,GAAGnB,MAAM,CAACvB,GAAG,CAAC,CAAC7B,KAAK,EAAEqE,CAAC,MAAM;QAAEtE,IAAI,EAAEvB,QAAQ,CAAC6F,CAAC,CAAC;QAAErE;MAAM,CAAC,CAAC,CAAC,CAACwE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC1E,KAAK,GAAGyE,CAAC,CAACzE,KAAK,CAAC;MAC7G,MAAM2E,KAAK,GAAGJ,UAAU,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC/C,GAAG,CAAC6B,IAAI,IAAIA,IAAI,CAAC3D,IAAI,CAAC;MAC5D,MAAM8E,MAAM,GAAGN,UAAU,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC/C,GAAG,CAAC6B,IAAI,IAAIA,IAAI,CAAC1D,KAAK,CAAC;MAE9D,OAAO;QACHiB,KAAK,EAAE;UAAEvB,IAAI,EAAEiF;QAAM,CAAC;QACtBvC,MAAM,EAAE,CACJ;UAAElC,IAAI,EAAE,KAAK;UAAER,IAAI,EAAE6E;QAAW,CAAC,EACjC;UAAErE,IAAI,EAAE,KAAK;UAAER,IAAI,EAAEmF,MAAM;UAAE7C,SAAS,EAAE;YAAES,MAAM,EAAE;cAAEnC,KAAK,EAAEwE;YAAS;UAAE;QAAE,CAAC;MAEjF,CAAC;IACL;IAEA,SAASA,QAAQA,CAAChF,MAAM,EAAE;MACtB,MAAMiF,SAAS,GAAG,CAAC;QACfC,UAAU,EAAE,CAAC;UACT7D,MAAM,EAAE,CAAC;UACTb,KAAK,EAAE,SAAS,CAAC;QACrB,CAAC,EAAE;UACCa,MAAM,EAAE,CAAC;UACTb,KAAK,EAAE,SAAS,CAAC;QACrB,CAAC;MACL,CAAC,EACD;QACI0E,UAAU,EAAE,CAAC;UACT7D,MAAM,EAAE,CAAC;UACTb,KAAK,EAAE,SAAS,CAAC;QACrB,CAAC,EAAE;UACCa,MAAM,EAAE,CAAC;UACTb,KAAK,EAAE,SAAS,CAAC;QACrB,CAAC;MACL,CAAC,CACA;MACD,OAAOyE,SAAS,CAACjF,MAAM,CAACmF,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}