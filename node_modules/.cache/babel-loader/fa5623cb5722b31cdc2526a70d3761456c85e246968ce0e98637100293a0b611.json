{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"DiTu1\"\n};\nconst _hoisted_2 = {\n  ref: \"chart\",\n  style: {\n    \"width\": \"600px\",\n    \"height\": \"400px\",\n    \"border\": \"1px solid gray\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 提示占位内容 \"), _createCommentVNode(\" <p>地图1功能正在开发中...</p> \"), _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2"],"sources":["D:\\00demo\\jiapudemo1\\src\\components\\DiTu1.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"DiTu1\">\r\n    <!-- 提示占位内容 -->\r\n    <!-- <p>地图1功能正在开发中...</p> -->\r\n    <div ref=\"chart\" style=\"width: 600px; height: 400px; border: 1px solid gray;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\n\r\nimport { onMounted,  ref } from 'vue';\r\nimport * as echarts from 'echarts'\r\n\r\n//引入\r\nimport Chinamap from '../assets/china.json'\r\nimport MyData from '../assets/new.json'\r\n\r\nconst province = [\r\n    '北京', '天津', '河北', '山西', '内蒙古', '辽宁', '吉林', \r\n    '黑龙江', '上海', '江苏', '浙江', '安徽', '福建', '江西', \r\n    '山东', '河南', '湖北', '湖南', '广东', '广西', '海南', \r\n    '重庆', '四川', '贵州', '云南', '西藏', '陕西', '甘肃', \r\n    '青海', '宁夏', '新疆', '台湾', '澳门', '香港'];\r\n\r\nconst phases = [\r\n    { start: 1600, end: 1700 },\r\n    { start: 1701, end: 1800 },\r\n    { start: 1801, end: 1900 },\r\n    { start: 1901, end: 2000 },\r\n    { start: 2001, end: 2024 }\r\n];\r\nconst phasesName = [\"17世纪\", \"18世纪\", \"19世纪\",\"20世纪\", \"21世纪\"];\r\n\r\nlet chart = ref();\r\nlet option = {\r\n    baseOption: {\r\n        timeline: {\r\n            axisType: 'category',\r\n            // realtime: false,\r\n            // loop: false,\r\n            autoPlay: true,\r\n            playInterval: 2000,\r\n            symbolSize: 12,\r\n            left: '5%',\r\n            right: '5%',\r\n            bottom: '0%',\r\n            width: '90%',\r\n            // controlStyle: {\r\n            //     position: 'left'\r\n            // },\r\n            data: phasesName,\r\n            tooltip: {\r\n                formatter: phases\r\n            },\r\n        },\r\n        tooltip: {\r\n            show: true,\r\n            formatter: function(params) {\r\n                return params.name + '：' + params.data['value']\r\n            },\r\n        },\r\n        visualMap: {\r\n            type: 'piecewise',\r\n            pieces: [\r\n                {\r\n                    min: 1000,\r\n                    max: 7000,\r\n                    color: '#BD430A'\r\n                },\r\n                {\r\n                    min: 501,\r\n                    max: 1000,\r\n                    color: '#E08150'\r\n                },\r\n                {\r\n                    min: 101,\r\n                    max: 500,\r\n                    color: '#E9B090'\r\n                },\r\n                {\r\n                    min: 1,\r\n                    max: 100,\r\n                    color: '#F2DDD2'\r\n                },\r\n                {\r\n                    value: 0,\r\n                    color: 'white'\r\n                }\r\n            ],\r\n            orient: 'vertical',\r\n            itemWidth: 25,\r\n            itemHeight: 15,\r\n            showLabel: true,\r\n            seriesIndex: [0],\r\n\r\n            textStyle: {\r\n                color: '#7B93A7'\r\n            },\r\n            bottom: '10%',\r\n            left: \"5%\",\r\n        },\r\n        grid: {\r\n            right: '5%',\r\n            top: '20%',\r\n            bottom: '10%',\r\n            width: '20%'\r\n        },\r\n        xAxis: {\r\n            // min: 0,\r\n            // max: 4000,\r\n            scale:true,\r\n            show: false\r\n        },\r\n        yAxis: [{\r\n            inverse: true,\r\n            offset: '2',\r\n            'type': 'category',\r\n            data: '',\r\n            nameTextStyle: {\r\n                color: '#fff'\r\n            },\r\n            axisTick: {\r\n                show: false,\r\n            },\r\n            axisLabel: {\r\n                //rotate:45,\r\n                textStyle: {\r\n                    fontSize: 14,\r\n                    color: '#000000',\r\n                },\r\n                interval: 0\r\n            },\r\n            axisLine: {\r\n                show: false,\r\n                lineStyle: {\r\n                    color: '#333'\r\n                },\r\n            },\r\n            splitLine: {\r\n                show: false,\r\n                lineStyle: {\r\n                    color: '#333'\r\n                }\r\n            },\r\n        }],\r\n        geo: {\r\n            map: 'chinaa',\r\n            right: '35%',\r\n            left: '20%',\r\n\r\n            label: {\r\n                emphasis: {\r\n                    show: false\r\n                }\r\n            },\r\n            itemStyle: {\r\n                emphasis: {\r\n                    areaColor: '#8792b3'\r\n                }\r\n            }\r\n        },\r\n        series: [{\r\n                name: 'mapSer',\r\n                type: 'map',\r\n                map: 'chinaa',\r\n                roam: false,\r\n                geoIndex: 0,\r\n                label: {\r\n                    show: false,\r\n                },\r\n            },\r\n            {\r\n                'name': '',\r\n                'type': 'bar',\r\n                zlevel: 2,\r\n                barWidth: '40%',\r\n                label: {\r\n                    normal: {\r\n                        show: true,\r\n                        fontSize: 14,\r\n                        position: 'right',\r\n                        formatter: '{c}'\r\n                    }\r\n                },\r\n            }\r\n        ],\r\n    },\r\n    animationDurationUpdate: 3000,\r\n    animationEasingUpdate: 'quinticInOut',\r\n    options: []\r\n};\r\n\r\nonMounted(() => {\r\n    const dataCounts = new Array(phases.length).fill(0).map(() => Array(province.length).fill(0));\r\n\r\n    MyData.forEach(item => {\r\n        const year = parseInt(item.版本年代);\r\n        phases.forEach((phase, phaseIndex) => {\r\n            if (year >= phase.start && year <= phase.end) {\r\n                province.forEach((prov, index) => {\r\n                    if (item.居地.includes(prov)) {\r\n                        dataCounts[phaseIndex][index]++;\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    console.log(\"Phase Province Counts:\", dataCounts);\r\n    console.log(\"****************************\");\r\n\r\n    \r\n    for (let n = 0; n < phases.length; n++) {\r\n        var res = [];\r\n        for (let j = 0; j < dataCounts[n].length; j++) {\r\n            res.push({\r\n                name: province[j],\r\n                value: dataCounts[n][j]\r\n            });\r\n        }\r\n        //降序取前10名\r\n        res.sort(function(a, b) {return b.value - a.value;});\r\n        console.log(res);\r\n        let res1 = [];\r\n        let res2 = [];\r\n        for (let t = 0; t < 10; t++) {\r\n            res1[t] = res[t].name;\r\n            res2[t] = res[t].value;\r\n        }\r\n        console.log(res1);\r\n        console.log(res2);\r\n        console.log(\"****************************\");\r\n        option.options.push({\r\n            yAxis: {\r\n                data: res1,\r\n            },\r\n            series: [{\r\n                type: 'map',\r\n                data: res\r\n                }, {\r\n                type: 'bar',\r\n                data: res2,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: function(params) {\r\n                        // build a color map as your need.\r\n                        var colorList = [{\r\n                                colorStops: [{\r\n                                    offset: 0,\r\n                                    color: '#BD430A' // 0% 处的颜色\r\n                                }, {\r\n                                    offset: 1,\r\n                                    color: '#BD430A' // 100% 处的颜色\r\n                                }]\r\n                            },\r\n                            {\r\n                                colorStops: [{\r\n                                    offset: 0,\r\n                                    color: '#BD430A' // 0% 处的颜色\r\n                                }, {\r\n                                    offset: 1,\r\n                                    color: '#BD430A' // 100% 处的颜色\r\n                                }]\r\n                            }\r\n                        ];\r\n                        if (params.dataIndex < 3) {\r\n                            return colorList[0]\r\n                        } else {\r\n                            return colorList[1]\r\n                        }\r\n                    },\r\n                    }\r\n                },\r\n            }]\r\n        });\r\n    }\r\n\r\n    // 基于准备好的dom，初始化echarts实例\r\n    let myChart = echarts.init(chart.value);\r\n\r\n    //注册Map\r\n    echarts.registerMap('chinaa',Chinamap);\r\n\r\n    // 使用配置。\r\n    myChart.setOption(option);\r\n\r\n});\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAO;;EAGXC,GAAG,EAAC,OAAO;EAACC,KAA4D,EAA5D;IAAA;IAAA;IAAA;EAAA;;;uBAHnBC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,mBAAA,YAAe,EACfA,mBAAA,0BAA6B,EAC7BC,mBAAA,CAAoF,OAApFC,UAAoF,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}